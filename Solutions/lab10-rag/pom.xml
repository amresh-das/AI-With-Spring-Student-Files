<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.2.6</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.example</groupId>
	<artifactId>lab10-rag-solution</artifactId>
	<version>1</version>
	<name>lab10-rag-solution</name>
	<description>Spring AI implementation of RAG</description>
	<properties>
		<java.version>21</java.version>
		<spring-ai.version>1.0.0-SNAPSHOT</spring-ai.version>
	</properties>
	<dependencies>

		<dependency>
			<groupId>org.springframework.ai</groupId>
			<artifactId>spring-ai-openai-spring-boot-starter</artifactId>
		</dependency>

		<!--
		TODO-01: For simplicity, we will use Spring AI's built in TransformerEmbeddingModel
		to create embeddings rather than use an external model.
		Feel free to replace this with a hosted FM for embeddings later if you like.
		-->
		<dependency>
			<groupId>org.springframework.ai</groupId>
			<artifactId>spring-ai-transformers-spring-boot-starter</artifactId>
		</dependency>


		<!--
		TODO-02: Add the dependency for Amazon Bedrock.
		The groupId value will be org.springframework.ai
		The artifactId will be spring-ai-bedrock-ai-spring-boot-starter
		Follow the lab setup instructions for establishing an AWS account
		and permission to use the Titan chat model, if you have not done so already.
		-->
		<dependency>
			<groupId>org.springframework.ai</groupId>
			<artifactId>spring-ai-bedrock-ai-spring-boot-starter</artifactId>
		</dependency>

		<!--
		TODO-02: Add the dependency for openai.
		The groupId value will be org.springframework.ai
		The artifactId will be spring-ai-openai-spring-boot-starter
		Follow the lab setup instructions for establishing an OpenAI account if you have not done so already.
		-->
		<dependency>
			<groupId>org.springframework.ai</groupId>
			<artifactId>spring-ai-openai-spring-boot-starter</artifactId>
		</dependency>

		<!--
		TODO-02: Add the dependency for azure openai.
		The groupId value will be org.springframework.ai
		The artifactId will be spring-ai-azure-openai-spring-boot-starter
		Follow the lab instructions for establishing an Azure account,
		permission to use Azure AI Services, OpenID resource, endpoint, keys,
		and deployment if you have not already done so.
		-->
		<dependency>
			<groupId>org.springframework.ai</groupId>
			<artifactId>spring-ai-azure-openai-spring-boot-starter</artifactId>
		</dependency>

		<!--
		TODO-02: Add the dependency for ollama.
		The groupId value will be org.springframework.ai
		The artifactId will be spring-ai-ollama-spring-boot-starter
		Follow the lab setup instructions to install Docker and
		Run Ollama in a Docker container, if you have not already done so.
		-->
		<dependency>
			<groupId>org.springframework.ai</groupId>
			<artifactId>spring-ai-ollama-spring-boot-starter</artifactId>
		</dependency>

		<!-- 
		TODO-21 (OPTIONAL): Replace the simple in-memory vector store with Redis.
		Remove the comment below to include the starter for Redis.
		Follow the instructions in the lab setup guide to installing and running Redis as a Docker container
		-->
		<dependency>
			<groupId>org.springframework.ai</groupId>
			<artifactId>spring-ai-redis-store-spring-boot-starter</artifactId>
		</dependency> 

		<!-- 
		TODO-24 (OPTIONAL): Replace the simple in-memory vector store with PGVector.
		Remove the comment below to include the starter for PGVector.
		Follow the instructions in the lab setup guide to installing and running PGVector as a Docker container
		-->
		<dependency>
			<groupId>org.springframework.ai</groupId>
			<artifactId>spring-ai-pgvector-store-spring-boot-starter</artifactId>
		</dependency> 

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.ai</groupId>
				<artifactId>spring-ai-bom</artifactId>
				<version>${spring-ai.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>
	<repositories>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
		<repository>
			<id>spring-snapshots</id>
			<name>Spring Snapshots</name>
			<url>https://repo.spring.io/snapshot</url>
			<releases>
				<enabled>false</enabled>
			</releases>
		</repository>
	</repositories>

</project>
